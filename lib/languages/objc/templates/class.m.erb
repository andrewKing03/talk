<%= autogenerated_warning %>
#define __CANONFILE__ "<%= truncated_name(@current_class) %>"
#import "TalkObjectList.h"
#import "TalkObject+Private.h"

#if ! __has_feature(objc_arc)
#error This file requires Automatic Reference Counting
#endif

@implementation <%= truncated_name(@current_class) %>
<%= dynamic_body_for_named_wrapper %>
<% unless trimmed_fields(@current_class).empty? then %>
@synthesize <%= (trimmed_fields(@current_class).map { |f| mapped_name(@current_class, f[:name], :field) }).join(', ') %>;
<% end %>

-(void) initKeymaps
{
  [super initKeymaps];
<% @target[:map].each do |map|
    next unless map[:class_name] == truncated_name(@current_class[:name])%>
  [self mapSerializedKey:@"<%= map[:field_name] %>" toLocalKey:@"<%= map[:new_field_name] %>"];
<% end %>}

<% unless (@current_class[:field].reject { |f| assist_line(f).nil? }).length == 0 then %>
-(NSString *) containerStructureForLocalKey: (NSString *) localKey
{<%
  @current_class[:field].each do |field|
    assist = assist_line(field)
    unless assist.nil? %>
  if([localKey isEqualToString:@"<%= mapped_name(@current_class, field[:name], :field) %>"]) return @"<%= assist %>";
    <%
    end
  end
  %>
  return [super containerStructureForLocalKey:localKey];
}
<% end %>
+(NSString *) fullyQualifiedClassName
{
  return @"<%= @current_class[:name] %>";
}

@end
